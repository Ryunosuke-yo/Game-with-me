
import Head from 'next/head'
import Header from '../componets/Header'
import Inputforsearch from '../componets/InputForSearch'
import SignUpForm from '../componets/signUpForm'
import { SignOut, SignIn } from '../componets/signInOut'
import { Button, Center, list, Text, VStack } from '@chakra-ui/react'
import SignedInSuc from '../componets/signedInSuc'
import { createContext, useCallback, useEffect } from 'react'
import Users from '../componets/userSearch/users'
import { useState } from 'react'
import SignUpButton from '../componets/signUpButton'
import {db, initializeDB} from "../lib/firebase"
import { query, where, collection, getDocs, getFirestore } from 'firebase/firestore'
import { getAuth } from "firebase/auth";
import { getCookie, setCookie } from '../lib/useCookie'




export default function Home() {
  const [searchedUser, setSearchedUser] = useState(null)
  const [userData, setUserData] =useState()
  const [showSignUp, setShowSignUp] = useState(false)
  const [user, setUser] = useState()
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  
  
  
  
  // useEffect(()=>{
    //   const loginFilterUsers = userData?.filter(u=>u.email != session?.user.email)
    //   setSearchedUser(loginFilterUsers)
    //   setUserData(loginFilterUsers)
    //   console.log(session)
    // }, [session])
    useEffect(()=>{
      if(getCookie() == null){
        setIsLoggedIn(false)
        console.log("false")
      } else {
        setIsLoggedIn(true)
      }
      
      initializeDB
      const t = getFirestore(initializeDB)
      const getUsers = async ()=>{
      const userCol = collection(t, "user")
      const userDocs = await getDocs(userCol)
      const list = userDocs.docs.map(doc=>doc.data())
      setSearchedUser(list)
      setUserData(list)
      console.log("ano useeffect")
      console.log(user)

      const auth = getAuth()
      const {currentUser} = auth
      const col = collection(getFirestore(), "user")
      console.log(currentUser)

      if(currentUser !== null){
        console.log(currentUser)
        const q = query(userCol, where("email", "==", currentUser.email));
        const cookieContent = {
          email : currentUser.email
        }
        console.log(q)

        const d = async ()=>{
            const user = await getDocs(q)
            user.forEach(u=>console.log(u.data()))
        }
        d()
        setCookie(currentUser.email)
        
    } else {
        console.log("no user")
    }
    }
    getUsers()
  },[])
  const renderUsers = userData ?  userData?.map(u=>
    <Users u = {u}/>
    ) : 
    null


    
  const handleNameInput = e =>{
    const {value} = e.target
    if(value== ""){
        setUserData(searchedUser)
    } else {
      const filtered = userData.filter(user=>{
        const isGamesIncludes = user.games.some((game)=>game.includes(e.target.value))
        
        return isGamesIncludes || user.name.includes(value) ? user : null
        })
        // console.log(searchedUser)
        setUserData(filtered)
    }
        }

  // const handleUser = (u)=>{
  //   setUser(u)
  // }

const toggleForm = ()=>{setShowSignUp(prev=> !prev)}
  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header isLoggedIn={isLoggedIn}/>
        {isLoggedIn ? <SignedInSuc  /> : 
        <>
        {showSignUp ? <SignUpForm toggleForm={toggleForm}/> :<SignUpButton toggleForm={toggleForm} setUser={(u)=>setUser(u)}/>}
        
        <SignIn />
        </>
        }
        <Inputforsearch handleNameInput={handleNameInput}/>
        <Center mb="2rem">
          <VStack>
              {renderUsers}
          </VStack>
        </Center>
        <Button onClick={()=>getCookie()}>cccc</Button>
      </main>
      </>
  )
}

// export async function getServerSideProps() {
//     initializeDB
//     db
//     const userCol = collection(db, "user")
//     const userDocs = await getDocs(userCol)
//     const list = userDocs.docs.map(doc=>doc.data())
    
  
  
  
//   // const findUsers = await myModel.find({})
//   return {
//             props : {
//                 user : list
//             }
//         }
// } 